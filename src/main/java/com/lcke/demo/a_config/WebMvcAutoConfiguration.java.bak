//package com.lcke.demo.a_config;
//
//import org.springframework.boot.autoconfigure.AutoConfigureAfter;
//import org.springframework.boot.autoconfigure.AutoConfigureOrder;
//import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
//import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
//import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;
//import org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration;
//import org.springframework.boot.autoconfigure.web.reactive.WebFluxProperties;
//import org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration;
//import org.springframework.boot.convert.ApplicationConversionService;
//import org.springframework.context.annotation.Bean;
//import org.springframework.context.annotation.Configuration;
//import org.springframework.core.Ordered;
//import org.springframework.format.FormatterRegistry;
//import org.springframework.web.servlet.DispatcherServlet;
//import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistration;
//import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;
//import org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;
//import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;
//
//import javax.servlet.Servlet;
//
//
//@Configuration
//@ConditionalOnWebApplication
//@ConditionalOnClass({Servlet.class, DispatcherServlet.class, WebMvcConfigurerAdapter.class})
//@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)
//@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)
//@AutoConfigureAfter({DispatcherServletAutoConfiguration.class, ValidationAutoConfiguration.class})
//public class WebMvcAutoConfiguration {
//    /**
//     *  private String staticPathPattern = "/**";
//     *
//     *     /*错误处理*/
//     *
//             *
//    private WebFluxProperties mvcProperties;
//     *
//             *
//             *if(!registry.hasMappingForPattern(staticPathPattern))
//
//    {
//     *customizeResourceHandlerRegistration(registry.addResourceHandler(staticPathPattern).
//            * addResourceLocations(this.resourceProperties.getStaticLocations()).setCachePeriod(cachePeriod));
//     *}
//     *
//             *
//    Integer cachePeriod = this.resourceProperties.getCachePeriod();
//     *
//             *if(!registry.hasMappingForPattern("/webjars/**"))
//
//    {
//     *customizeResourceHandlerRegistration(registry.addResourceHandler("/webjars/**").
//            * addResourceLocations("classpath:/META-INF/resources/webjars/").setCachePeriod(cachePeriod));
//     *}
//     *
//             *
//    @Bean
//     *
//
//    public WelcomePageHandlerMapping welcomePageHandlerMapping(ResourceProperties resourceProperties) {
//     *return new WelcomePageHandlerMapping(resourceProperties.getWelcomePage(), this.mvcProperties.getStaticPathPattern());
//     *}
//     *
//             * //    @Override
//             *
//
//    public void addResourceHandlers(ResourceHandlerRegistry registry) {
//     *if (!this.resourceProperties.isAddMappings()) {
//     *logger.debug("Default resource handling disabled");
//     *return;
//     *}
//     *Integer cachePeriod = this.resourceProperties.getCachePeriod();
//     *
//     *         /*如果是/webjars/**请求，则将其映射到classpath:/META-INF/resources/webjars/目录下*/
//     *if (!registry.hasMappingForPattern("/webjars/**"))
//     *
//        customizeResourceHandlerRegistration(registry.addResourceHandler("/webjars/**").addResourceLocations("classpath:/META-INF/resources/webjars/").setCachePeriod(cachePeriod));/*如果是请求/**，将其映射到上述staticLocations指定的值*/
//     *String staticPathPattern = this.mvcProperties.getStaticPathPattern();
//     *if (!registry.hasMappingForPattern(staticPathPattern))
//     *
//        customizeResourceHandlerRegistration(registry.addResourceHandler(staticPathPattern).addResourceLocations(this.resourceProperties.getStaticLocations()).setCachePeriod(cachePeriod));
//     *}
//     *
//     *
//     *
//     */
//
//
//}