#spring.profiles.include=prod

# 设置 springBoot 的内置tomcat端口
#server.port=8082
#server.error.path=/error
server.servlet.context-path=/boot
# tomcat相关设置
server.tomcat.uri-encoding=UTF-8

# 配置 HTTPS 相关信息
server.port =  443
# 为了后面的配置使用，暂时无用
server.http-port =  8082
server.ssl.enabled =  true
# 证书文件 # 密码 # 密钥库类型
server.ssl.key-store =  classpath:tomcat_https.keystore
server.ssl.key-password =  123456
server.ssl.key-store-type =  JKS
server.ssl.key-alias =  tomcat_https

# 设置是否启动debug
#debug=true

#国际化资源
spring.messages.basename=i18n.login,messages.properties

# 设置启用 开发，测试，生产 的配置文件
#spring.profiles.active=prod
#spring.profiles.include=prod

# 配置数据库连接
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
#spring.datasource.url=jdbc:mysql://localhost:3306/jeefast?serverTimezone=UTC&&allowMultiQueries=true&useUnicode=true&characterEncoding=UTF-8
#spring.datasource.username=root
#spring.datasource.password=123456
spring.datasource.url=jdbc:mysql://47.94.106.72:3306/test?serverTimezone=UTC&&allowMultiQueries=true&useUnicode=true&characterEncoding=UTF-8
spring.datasource.username=test
spring.datasource.password=	ArRadR8SHE2PCZwX
spring.datasource.type: com.alibaba.druid.pool.DruidDataSource
#spring.datasource.druid 配置在 utils/DruidConfig
#spring.datasource.schema=classpath*:sql/department.sql,classpath*:sql/employee.sql

# Redis数据库索引（默认为0）
spring.redis.database=0
# Redis服务器地址
spring.redis.host=127.0.0.1
# Redis服务器连接端口
spring.redis.port=6379
# Redis服务器连接密码（默认为空）
spring.redis.password=
## 连接池最大连接数（使用负值表示没有限制）
#spring.redis.jedis.pool.max-active=200
## 连接池最大阻塞等待时间（使用负值表示没有限制）
#spring.redis.jedis.pool.max-wait=-1
## 连接池中的最大空闲连接
#spring.redis.jedis.pool.max-idle=10
## 连接池中的最小空闲连接
#spring.redis.jedis.pool.min-idle=0
# 2+不使用 jedis 使用lettuce，配置了 pool 就需要在 pom 中引入commons-pool2
# 最大连接数 负数为无限制，默认为 8
spring.redis.lettuce.pool.max-active=8
# 连接池最大空闲连接
spring.redis.lettuce.pool.max-idle=8
# 连接池最小空闲连接
spring.redis.lettuce.pool.min-idle=0
# 连接超时时间（毫秒）
spring.redis.timeout=10000


#Mybatis配置
#指定POJO扫描包来让mybatis自动扫描到自定义POJO
mybatis.type-aliases-package=com.lcke.demo.pojo
# 指定 mybatis xml格式的配置文件
#  config-location: classpath:mybatis/mybatis-config.xml
#mybatis文件位置
mybatis.mapper-locations=classpath:mapper/*.xml,classpath*:/mappers/*.xml
# mybatis 下划线转驼峰
mybatis.configuration.map-underscore-to-camel-case=true

# 常用的日志框架
# JUL、JCL、Jboss-logging、logback、log4j、log4j2、slf4j...
# Spring Boot底层是Spring框架，而Spring框架模式使用的是JCL；
# 所以Spring Boot对日志框架进行了封装，选用 SLF4j 和 Logback作为日志框架。

# 常用搭配 common-logging+log4j 或者 slf4j + logback
# 日志门面（日志的抽象层）
# JCL(Jakarta Common logging)---Apache常用的common-logging ,  SLF4j(Simple Logging Facade for Java) -- 目前常用 ,  jboss-logging
# 日志的实现层
# Log4j , Log4j2 ,  JUL(java.util.logging), Logback -- 目前常用
# 设置默认的root级别，即Spring Boot默认的日志级别
#logging.level.root=debug
# 设置org.com.cay.spring.boot所在的包使用trace的日志级别，其他使用默认的
#logging.level.org.com.cay.spring.boot=trace

#日志文件位置
# logging.file	    logging.path	Example	        Description
# (none)	        (none)		                    只在控制台输出
# 指定文件名	        (none)	        my.log	        输出日志到my.log文件中
# (none)	        指定目录	        /var/log	    输出日志到指定目录下的spring.log文件中
# 在当前项目下生成springboot.log日志文件，也可以使用绝对路径
logging.file.name=springboot-1222.log
# 在当前磁盘的根路径下创建spring文件夹以及里面的log文件夹，并使用默认的spring.log作为日志文件名
#logging.file.path=/spring/log/ #%d表示日期时间，#%thread表示线程名，#%-5level：级别从左显示5个字符宽度
#%logger{50} 表示logger名字最长50个字符，否则按照句点分割。#%msg：日志消息，#%n是换行符
#自定义日志配置文件
#在类路径下放置当前系统中使用的日志框架的自定义配置文件即可，Spring Boot就不再使用默认的配置了。
#Logging    System	Customization
#Logback	logback-spring.xml, logback-spring.groovy, logback.xml or logback.groovy
#Log4j2	    log4j2-spring.xml or log4j2.xml
#JDK (Java Util Logging)	logging.properties
#如果日志配置文件名为logback.xml，则会直接被日志框架所识别；
#如果日志配置文件名为logback-spring.xml（推荐加上-spring），则日志框架不会直接加载日志的配置，
# 而是由Spring Boot来解析日志配置，从而可以使用Spring Boot提供的高级Profile功能；
## springProfile标签可以根据当前环境的profile来动态切换日志的配置项，
# 而springProfile可以在logback的配置文件的configuration根标签下任何地方使用，多个profile使用逗号分隔开。
# Profile
#<configuration>
#   <springProfile name="dev">
#       <!-- 当前是dev环境时使用如下配置 -->
#   </springProfile>
#   <springProfile name="!dev">
#       <!-- 当前不是dev环境时使用如下配置 -->
#   </springProfile>
#   <springProfile name="staging, prod">
#       <!-- 当前环境是staging或者prod时使用如下配置 -->
#    </springProfile>
#</configuration>

# 添加RabbitMQ配置信息
spring.rabbitmq.host=127.0.0.1
spring.rabbitmq.port=5672
spring.rabbitmq.username=test
spring.rabbitmq.password=test
spring.rabbitmq.virtual-host=/
#spring.rabbitmq.publisher-confirms=true
spring.rabbitmq.publisher-confirm-type=simple

spring.mail.host=smtp.ym.163.com
spring.mail.port=25
# 你的邮箱地址
spring.mail.username=hostnow@lcke.xyz
# 你的授权码（126 和 163 以及 qq 邮箱 都需要授权码登录，没有授权码的直接登录网页版邮箱设置里设置）
spring.mail.password=25E87ZKgP3
spring.mail.default-encoding=UTF-8


# 个人定义的一些配置，
# 可以通过 @ConfigurationProperties 读取全局（整个文件）
# 可以通过 @Value 读取某一个配置
person.name=zahngsan
person.age=15
person.lists=[1,2,"中文"]

person.value="value测试"



